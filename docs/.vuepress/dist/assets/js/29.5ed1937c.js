(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{380:function(t,e,a){"use strict";a.r(e);var r=a(25),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),a("h2",{attrs:{id:"reactdom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reactdom"}},[t._v("#")]),t._v(" ReactDom")]),t._v(" "),a("h3",{attrs:{id:"reactdom-render-element-container-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reactdom-render-element-container-callback"}},[t._v("#")]),t._v(" "),a("code",[t._v("ReactDOM.render(element, container[, callback])")])]),t._v(" "),a("p",[t._v("在提供的 container 里渲染一个 React 元素，并返回对该组件的引用（或者针对无状态组件返回 null）。")]),t._v(" "),a("p",[t._v("如果 React 元素之前已经在 container 里渲染过，这将会对其执行更新操作，并仅会在必要时改变 DOM 以映射最新的 React 元素。")]),t._v(" "),a("p",[t._v("如果提供了可选的回调函数，该回调将在组件被渲染或更新之后被执行。")]),t._v(" "),a("ul",[a("li",[t._v("ReactDOM.render() 会控制你传入容器节点里的内容。当首次调用时，容器节点里的所有 DOM 元素都会被替换，后续的调用则会使用 React 的 DOM 差分算法（DOM diffing algorithm）进行高效的更新。")])]),t._v(" "),a("h3",{attrs:{id:"hydrate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hydrate"}},[t._v("#")]),t._v(" "),a("code",[t._v("hydrate()")])]),t._v(" "),a("p",[t._v("server render")]),t._v(" "),a("h3",{attrs:{id:"unmountcomponentatnode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unmountcomponentatnode"}},[t._v("#")]),t._v(" "),a("code",[t._v("unmountComponentAtNode")])]),t._v(" "),a("h2",{attrs:{id:"finddomnode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finddomnode"}},[t._v("#")]),t._v(" "),a("code",[t._v("findDOMNode()")])]),t._v(" "),a("h2",{attrs:{id:"createportal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#createportal"}},[t._v("#")]),t._v(" "),a("code",[t._v("createPortal()")])])])}),[],!1,null,null,null);e.default=n.exports}}]);